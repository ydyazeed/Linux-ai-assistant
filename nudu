#!/bin/bash

# nudu - Linux AI Assistant
# A simple command-line AI assistant for Linux system administration

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Default configuration
NUDU_MODEL="${NUDU_MODEL:-mistral:latest}"
NUDU_LOG_LEVEL="${NUDU_LOG_LEVEL:-WARNING}"
NUDU_PYTHON="${NUDU_PYTHON:-python3}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

show_help() {
    cat << EOF
nudu - Linux AI Assistant

USAGE:
    nudu [OPTIONS] <question>
    nudu <question>

EXAMPLES:
    nudu why is my cpu slow?
    nudu show me disk usage
    nudu find large files
    nudu what processes are using memory?
    nudu check if nginx is running
    nudu --dry-run why is my system slow?

OPTIONS:
    --dry-run           Don't execute commands, just show what would run
    --debug             Enable debug logging
    --model MODEL       Use specific Ollama model (default: mistral:latest)
    --help, -h          Show this help message
    --version           Show version information

ENVIRONMENT VARIABLES:
    NUDU_MODEL          Default model to use (default: mistral:latest)
    NUDU_LOG_LEVEL      Log level: DEBUG, INFO, WARNING, ERROR (default: WARNING)
    NUDU_PYTHON         Python command to use (default: python3)

SETUP:
    First time setup:
    1. Install Ollama: https://ollama.ai/
    2. Pull model: ollama pull mistral
    3. Run: nudu "test my setup"

For more information, visit: https://github.com/ydyazeed/Linux-ai-assistant
EOF
}

show_version() {
    echo "nudu (Linux AI Assistant) v1.0.0"
    echo "Copyright (c) 2024. Licensed under MIT License."
}

check_dependencies() {
    # Check if Python is available
    if ! command -v "$NUDU_PYTHON" &> /dev/null; then
        print_error "Python 3 not found. Please install Python 3.8+ or set NUDU_PYTHON environment variable."
        return 1
    fi

    # Check Python version
    python_version=$($NUDU_PYTHON --version 2>&1 | cut -d' ' -f2)
    if ! $NUDU_PYTHON -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)" 2>/dev/null; then
        print_error "Python 3.8+ required. Current version: $python_version"
        return 1
    fi

    # Check if required Python modules are available
    if ! $NUDU_PYTHON -c "import requests" 2>/dev/null; then
        print_error "Missing Python module 'requests'. Install with: pip install requests"
        return 1
    fi

    # Check if Ollama is running
    if ! curl -s http://localhost:11434/api/tags &> /dev/null; then
        print_warning "Ollama is not running or not accessible."
        print_info "Make sure Ollama is running with: ollama serve"
        print_info "Or install Ollama from: https://ollama.ai/"
        return 1
    fi

    return 0
}

main() {
    local dry_run=false
    local debug=false
    local model="$NUDU_MODEL"
    local query=""
    local args=()

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                dry_run=true
                shift
                ;;
            --debug)
                debug=true
                shift
                ;;
            --model)
                model="$2"
                shift 2
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            --version)
                show_version
                exit 0
                ;;
            --*)
                print_error "Unknown option: $1"
                echo "Use 'nudu --help' for usage information."
                exit 1
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done

    # Join remaining arguments as the query
    query=$(IFS=' '; echo "${args[*]}")

    # Validate query
    if [[ -z "$query" ]]; then
        print_error "No question provided."
        echo ""
        echo "Examples:"
        echo "  nudu why is my cpu slow?"
        echo "  nudu show me disk usage"
        echo "  nudu find large files"
        echo ""
        echo "Use 'nudu --help' for more information."
        exit 1
    fi

    # Check dependencies
    if ! check_dependencies; then
        exit 1
    fi

    # Build Python command
    local python_args=(
        "$SCRIPT_DIR/linux_ai_assistant.py"
        "--model" "$model"
        "--query" "$query"
    )

    if [[ "$dry_run" == "true" ]]; then
        python_args+=(--dry-run)
    fi

    if [[ "$debug" == "true" ]]; then
        python_args+=(--log-level DEBUG)
    else
        python_args+=(--log-level "$NUDU_LOG_LEVEL")
    fi

    # Run the assistant
    exec "$NUDU_PYTHON" "${python_args[@]}"
}

# Run main function with all arguments
main "$@" 